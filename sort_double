%let start=0;
%let end=1;
%let pre=-10;
%let event=all;
%let inv=all;
%let win=1;

proc sql;
create table &event._60d_imb as select distinct a.* from broker.all_eerbl_60d_imb a,broker.all_eerbl b
where a.stock_code_1=b.stock_code_1 and a.event_date=b.event_date and b.&event.=1;
quit;

proc sql;
create table imb_b10 as select distinct stock_code_1,event_date
,sum(abret_index) as indexb10,sum(abret_month) as monthb10
,sum(all_imb_adj) as all_imbb10
,sum(beijing_imb_adj) as beijing_imbb10
,sum(shanghai_imb_adj) as shanghai_imbb10
,sum(other_imb_adj) as other_imbb10
,sum(home_city_imb_adj) as home_city_imbb10
,sum(home_province_imb_adj) as home_province_imbb10
,sum(fund_imb_adj) as fund_imbb10
from &event._60d_imb
where time_trade<&start and time_trade>=&start+&pre
group by stock_code_1,event_date;
quit;


%macro abRet(r);
proc sql;
create table CAR_before1 as select distinct stock_code_1,event_date,sum(abret_&r.) as &r.pre1 
from &event._60d_imb
where time_trade>=&start+&pre and time_trade<&start
group by stock_code_1,event_date;
quit;

proc sql;
create table CAR_after1 as select distinct stock_code_1,event_date,sum(abret_&r.) as &r.win1 
from &event._60d_imb
where time_trade>=&start and time_trade<=&end
group by stock_code_1,event_date;
quit;

proc sql;
create table CAR_after2 as select distinct stock_code_1,event_date,sum(abret_&r.) as &r.win2
from &event._60d_imb
where time_trade>=&start and time_trade<=&end+5
group by stock_code_1,event_date;
quit;

proc sql;
create table CAR_after3 as select distinct stock_code_1,event_date,sum(abret_&r.) as &r.win3
from &event._60d_imb
where time_trade>=&start and time_trade<=&end+10
group by stock_code_1,event_date;
quit;

proc sql;
create table CAR_after4 as select distinct stock_code_1,event_date,sum(abret_&r.) as &r.win4
from &event._60d_imb
where time_trade>=&start and time_trade<=&end+20
group by stock_code_1,event_date;
quit;

proc sql;
create table CAR_after5 as select distinct stock_code_1,event_date,sum(abret_&r.) as &r.win5 
from &event._60d_imb
where time_trade>=&start and time_trade<=&end+60
group by stock_code_1,event_date;
quit;

proc sql;
create table CAR_after6 as select distinct stock_code_1,event_date,sum(abret_&r.) as &r.win6 
from &event._60d_imb
where time_trade>=&start and time_trade<=&end+60
group by stock_code_1,event_date;
quit;

data imb_CAR;
merge imb_b10 CAR_before1 CAR_after1 CAR_after2 CAR_after3 CAR_after4 CAR_after5 CAR_after6;
by stock_code_1 event_date;
run;

proc sql;
create table imb_CAR1 as select * from imb_CAR
where &inv._imbb10^=. and &inv._imbb10^=0;
quit;

proc sort;
by &r.pre1;
run;

data _null_;
       set imb_car1 nobs=t;
       call symput("size",t);
       stop;
run;


data imb_car1;
set imb_car1;
if _n_<=&size./5 then pre_quintile=1;
if _n_>&size./5 and _n_<=&size./5*2 then pre_quintile=2;
if _n_>&size./5*2 and _n_<= &size./5*3 then pre_quintile=3;
if _n_>&size./5*3 and _n_<=&size./5*4 then pre_quintile=4;
if _n_>&size./5*4 and _n_<=&size. then pre_quintile=5;
run;

%macro loop(k);
data sort_inv_&event._&r._&k;
length estimates $20.;
quintile=.;
estimates='';
run;

data pre_diff_&r.;
length estimates $20.;
quintile=.;
estimates='';
run;

data sub_pre_&k.;
set imb_car1;
if pre_quintile=&k;
run;

proc sort;
by &inv._imbb10;
run;

data _null_;
       set sub_pre_&k. nobs=t;
       call symput("size",t);
       stop;
run;

data sub_pre_&k.;
set sub_pre_&k.;
if _n_<=&size./5 then quintile=1;
if _n_>&size./5 and _n_<=&size./5*2 then quintile=2;
if _n_>&size./5*2 and _n_<= &size./5*3 then quintile=3;
if _n_>&size./5*3 and _n_<=&size./5*4 then quintile=4;
if _n_>&size./5*4 and _n_<=&size. then quintile=5;
run;

data sub_pre_&k.;
set sub_pre_&k.;
cluster1=week(event_date)+(year(event_date)-2007)*100;
cluster2=week(event_date)+(year(event_date)-2007)*100;
cluster3=month(event_date)+(year(event_date)-2007)*100;
cluster4=month(event_date)+(year(event_date)-2007)*100;
cluster5=qtr(event_date)+(year(event_date)-2007)*100;
cluster6=qtr(event_date)+(year(event_date)-2007)*100;
if quintile=1 then Q5=0;
if quintile=5 then Q5=1;
run;

data Q1_5;
set sub_pre_&k.;
if Quintile=1 or Quintile=5;
run;

%macro CAR(n);
ODS output Parameterestimates=temp1;
proc surveyreg data=sub_pre_&k.;
by quintile;
model &r.win&n.=;
cluster cluster&n;
run;
ODS output close;

ODS output Parameterestimates=temp2;
proc surveyreg data=Q1_5;
model &r.win&n.=Q5;
cluster cluster&n;
run;
ODS output close;

data temp2;
set temp2;
if _n_=1 then delete;
quintile=6;
run;

data temp3;
set temp1 temp2;
keep quintile estimate tValue;
run;
%mend CAR;

%car(&win);;

data sort_inv_&event._&r._&k;
set sort_inv_&event._&r._&k temp3;
run;

data sort_inv_&event._&r._&k;
set sort_inv_&event._&r._&k;
if quintile^=.;
run;

data sort_inv_all_&r._&k;
set sort_inv_all_&r._&k;
array turnTheseColumnsAround{*} _numeric_;
quintile =_n_;
do j = 1 to dim(turnTheseColumnsAround);
    pre_Q&k.= turnTheseColumnsAround{j};
    output;
end;
keep quintile estimates pre_Q&k.; 
run;

data sort_inv_all_&r._&k;
set sort_inv_all_&r._&k;
if mod(_n_,3)=1 then delete;
if mod(_n_,3)=2 then estimates='Mean';
if mod(_n_,3)=0 then estimates='t';
run;

%mend loop;
%loop(1);%loop(2);%loop(3);%loop(4);%loop(5);

data imb_CAR2;
set sub_pre_1 sub_pre_2 sub_pre_3 sub_pre_4 sub_pre_5;
if pre_quintile=1 then pre_Q5=0;
if pre_quintile=5 then pre_Q5=1;
run;

data pre_Q1_5;
set imb_CAR2;
if pre_quintile=1 or pre_quintile=5;
run;

proc sort;
by quintile;
run;

%macro CAR(n);
ODS output Parameterestimates=temp2;
proc surveyreg data=pre_Q1_5;
by quintile;
model &r.win&n.=pre_Q5;
cluster cluster&n;
run;
ODS output close;

data temp2;
set temp2;
if mod(_n_,2)=1 then delete;
run;

data temp3;
set temp2;
keep quintile estimate tValue;
run;

data temp3;
set temp3;
array turnTheseColumnsAround{*} _numeric_;
quintile =_n_;
do j = 1 to dim(turnTheseColumnsAround);
   pre_diff= turnTheseColumnsAround{j};
    output;
end;
keep quintile pre_diff; 
run;

data temp3;
set temp3;
if mod(_n_,3)=1 then delete;
if mod(_n_,3)=2 then estimates='Mean';
if mod(_n_,3)=0 then estimates='t';
run;
%mend CAR;

%car(&win);;

data pre_diff_&r.;
set temp3;
run;

data double_sort_&r._0_1;
merge sort_inv_all_&r._1 sort_inv_all_&r._2 sort_inv_all_&r._3 sort_inv_all_&r._4 sort_inv_all_&r._5 pre_diff_&r.;
by quintile estimates;
run;

%mend abRet;


%abRet(index);
%abRet(month);
